---
name: Securin Scan
"on":
- workflow_dispatch
- pull_request
jobs:
  scanning:
    env:
      APP_ID: a040441301daa0781830f3f1a020a98132503cfa5a8ae1095483485eb6f89daf
    steps:
    - name: Decrypt
      id: decrypt
      run: |-
        access_token=$(echo 'U2FsdGVkX18v8rVOXbgSiCXWOV2p8i0Krj57rMao0/9152zuuI9DCzSGG2Ym0aypAZzQAPsu4ERga9NXgmzeUfflB1FIVl9h1tleDDASFb2rPEFlbov61xsyzVqN2wDct3t5GAaK58O1MuM6gnNraywHlAf6KbCmK7aogu1vxtEn0D7RVb7A6/UKxHIHfyOwnr6xmT7WUQXLAGUjJFeaMgqDeCRrNP+F5pec0P8VrGmO2Beks+thp+0kxJr2WSJ3h9P+IUzCO3PuSEpR917Pxw==' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        scan_info=$(echo 'U2FsdGVkX1/7ieptqGU30gwU3IC5HFyZnzkSMdCpJHeEGwucU188Kgw6M08d8hE+Ka6psS5HapVv//9PhEQIZ+1AHCBLpGrVO3tnZDF9HfHD820k3/yLQ5h556+zNpVKu3gcJf5syhBK9sO4DW/LQtvUx1t2Eg69k+kdusISj0VyDE1QnheeHkLEStpJIhB0pZJ/qUO2iK3IFKsp4UxpgsRc0vZLif+POxep3++OjKI=' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        cmd1=$(echo 'U2FsdGVkX1/UwptL6OMHWdT6q7Ik0nYZuW4CmSXpOtwA/MYoaa77jXMzvBa3keVv/lEoXNnizl9yDldmf9eAag==' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        cmd2=$(echo 'U2FsdGVkX1/BNzzIQNyK4QyfZJ3jRgogWprmbaj9kW2WHxEVhoYaqC2zFeD+MaFk' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        cmd3=$(echo 'U2FsdGVkX1+d4N0vlB/BUkyEWqn9CIbjcLoMaF0JzWIcVXNacr7rORIrPeSShu4S5i5RpBh3xHtECszvc2TdNqYcu52rdRWBW9bayRwv1oiidZ+6bwQ1pKg2nOguPfMYUWa8ZlVwz73ltD8GvXdhiVWiK1tvDKTz4Ms0b8cLcq8=' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        status=$(echo 'U2FsdGVkX18Ifc/wqRA/rMwSJBDbKk/Sab4xZ15cDgqfOd54oqYvnD3tfvKOMUQU' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        echo "::set-output name=access_token::$access_token"
        echo "::set-output name=scan_info::$scan_info"
        echo "::set-output name=cmd1::$cmd1"
        echo "::set-output name=cmd2::$cmd2"
        echo "::set-output name=cmd3::$cmd3"
        echo "::set-output name=status::$status"
    - name: Access token
      id: access_token
      run: |-
        token=$(${{ format(steps.decrypt.outputs.access_token, secrets.USER_NAME, secrets.PASSWORD)}} | jq -r '.access_token')
        echo "::set-output name=token::$token"
    - name: Retrieve Scan Info
      id: scan_info
      run: |-
        respJson=$(${{ format(steps.decrypt.outputs.scan_info, env.APP_ID, steps.access_token.outputs.token)}})
        echo "::set-output name=scanInfoResp::$respJson"
    - uses: actions/checkout@v2
    - name: Build with Maven
      run: $(echo 'U2FsdGVkX19AVeTlWUrEJUvlXcTB1ZGk/xkZxGz3TQoEPjmRahok/k2sYy59d6AXHxyYqQiAk7p893PY/SVfWQ=='
        | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
    - name: Scan Initiated
      run: |-
        ${{format(steps.decrypt.outputs.cmd1, fromJson(steps.scan_info.outputs.scanInfoResp).user, fromJson(steps.scan_info.outputs.scanInfoResp).password, fromJson(steps.scan_info.outputs.scanInfoResp).proxyUrl )}}
        ${{format(steps.decrypt.outputs.cmd2, fromJson(steps.scan_info.outputs.scanInfoResp).imageTag)}}
        ${{format(steps.decrypt.outputs.cmd3, github.workspace, github.workspace, fromJson(steps.scan_info.outputs.scanInfoResp).imageTag, secrets.USER_NAME, secrets.PASSWORD, env.APP_ID, github.event_name, github.event.number)}}
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: ${{github.workspace}}/results/result.sarif
      if: hashFiles('**/result.sarif') !=''
    - name: Evaluate build status
      run: |
        ${{format(steps.decrypt.outputs.status, github.workspace)}}
        exit 1
      if: hashFiles('**/status.txt') !=''
    runs-on: ubuntu-latest
