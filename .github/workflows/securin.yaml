---
name: Securin Scan
"on":
- workflow_dispatch
- pull_request
jobs:
  scanning:
    env:
      APP_ID: a040441301daa0781830f3f1a020a98132503cfa5a8ae1095483485eb6f89daf
    steps:
    - name: Decrypt
      id: decrypt
      run: |-
        access_token=$(echo 'U2FsdGVkX1+5VYfuBxBBpX23V7Jbi+sGpGL1PR2H+KzCOIplLzdqzcSSpPDAFiXRBceJ5YsD9cKBUY3hcLo9YYbQ9jnS42Oy5RQEEMo97A4eNpqS/znmy9EJqfIzK3rUPStfxa37Aa83/zg9p7FS0mso1L98CVR0oKX+hHV5RNYobNhS85VDPLYMw2Fr/JEAhpAyTMDlgx0fcyybTvvgUKDYMWSEAJ52MAVs7AEZara8fXSfcTFI8OlVeMpejWHpavwZ600vifthXHOjeiIM5A==' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        scan_info=$(echo 'U2FsdGVkX18YeI2G8o7o/A/+7ClzGU/qb+s5kw3P/jr8SwC3bkjVadqxScT0oJaeaSIP4DJX6yz1Yc/spfBeK5Wt818D0Nxg1DBp3+hdHMKcutnkDX2rY/3Ew5uLwqInB9QW6J8YY42Cou+wDapbYVT0w2pagYdE0X9NtltFYi8s8ufkgQx/kTmQKXmuGh9rch8pE3EzXEH1uvP/eMXUrYtv4heeZ+wEno9sGP+5O44=' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        cmd1=$(echo 'U2FsdGVkX1/FWxi2bBhY6h7K/7tySJCo0yaImAZoPVInuHEPJ625dYkv3UvH+515jlcKOz7yyWWfv5uM9XbHYA==' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        cmd2=$(echo 'U2FsdGVkX18RFfSIZWh5Y7r7hefohBM6NWwvNX9Xx03IdCNj92vzTPfHGn0lqvoS' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        cmd3=$(echo 'U2FsdGVkX19/T00V7GFhiNQ8mnZLlBL9mfqhTjE3qMR0kN2WG1ngN5zRd/TiHxM+OAL8XjWKyX6bnQk1z3TVVnJ0sBklYuUU/udfVaosG4FuLr7UESuVrbbnmR4hY9s8+qqps9+e2cfbyvqm1SpBnMhCWwIDAbcSe0/guZsKrOQ=' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        status=$(echo 'U2FsdGVkX1/4bCF0M+Lf1R/9eBnrnvjTucV5/32Zg/sh40EF41XXy4IWVa5gWoVu' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        echo "::set-output name=access_token::$access_token"
        echo "::set-output name=scan_info::$scan_info"
        echo "::set-output name=cmd1::$cmd1"
        echo "::set-output name=cmd2::$cmd2"
        echo "::set-output name=cmd3::$cmd3"
        echo "::set-output name=status::$status"
    - name: Access token
      id: access_token
      run: |-
        token=$(${{ format(steps.decrypt.outputs.access_token, secrets.USER_NAME, secrets.PASSWORD)}} | jq -r '.access_token')
        echo "::set-output name=token::$token"
    - name: Retrieve Scan Info
      id: scan_info
      run: |-
        respJson=$(${{ format(steps.decrypt.outputs.scan_info, env.APP_ID, steps.access_token.outputs.token)}})
        echo "::set-output name=scanInfoResp::$respJson"
    - uses: actions/checkout@v2
    - name: Build with Maven
      run: $(echo 'U2FsdGVkX19zYoJmqj3o1xZ9g1puAVbsob/6/UEWeq+mKfBnlTBNBBLzyCUMJYjMnuhZ7nCAtn3ydSXBRau/mQ=='
        | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
    - name: Scan Initiated
      run: |-
        ${{format(steps.decrypt.outputs.cmd1, fromJson(steps.scan_info.outputs.scanInfoResp).user, fromJson(steps.scan_info.outputs.scanInfoResp).password, fromJson(steps.scan_info.outputs.scanInfoResp).proxyUrl )}}
        ${{format(steps.decrypt.outputs.cmd2, fromJson(steps.scan_info.outputs.scanInfoResp).imageTag)}}
        ${{format(steps.decrypt.outputs.cmd3, github.workspace, github.workspace, fromJson(steps.scan_info.outputs.scanInfoResp).imageTag, secrets.USER_NAME, secrets.PASSWORD, env.APP_ID, github.event_name, github.event.number)}}
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: ${{github.workspace}}/results/result.sarif
      if: hashFiles('**/result.sarif') !=''
    - name: Evaluate build status
      run: |
        ${{format(steps.decrypt.outputs.status, github.workspace)}}
        exit 1
      if: hashFiles('**/status.txt') !=''
    runs-on: ubuntu-latest
