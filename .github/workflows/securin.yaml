---
name: Securin Scan
"on":
- workflow_dispatch
- pull_request
jobs:
  scanning:
    env:
      APP_ID: a040441301daa0781830f3f1a020a98132503cfa5a8ae1095483485eb6f89daf
    steps:
    - name: Decrypt
      id: decrypt
      run: |-
        access_token=$(echo 'U2FsdGVkX19SvRvgzw5jIPaXSR0fNo9l3ArwdZS0K393ZsNI/cHX7yXcMc08zf+p1JpL8bjCAnnO4ilc+UWI1q0KAp995d0+rCftU7qtnVjhDdRUSQ0k7Yel1r6AobOSwVnDmIBFpsren1FAQwuJ6D1XSPEf4F+PDuNCPc3JGlfRUhBOXjbjTqinX14yU21+JvO+YF8Kr2df0UEr78yjhAWudpWtlCLBQ2XCLgrQr+/WAGaV+wI8TuS8dp5w8r6J' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        scan_info=$(echo 'U2FsdGVkX1+B27el5Lrv3jVjNjxGBhcc6XLXxVzDiJtYN38QPRQ7Ob7R+F4+yeJBk6rPAou37T7bQaK0wGjQ1zziYeVduK3MEVmgIcmLxoZnquv47k1ZqiumWIXW8l/9yLtuuPPkyQNw64tznUWWRcGCGpQ0j+kmF3ujIWXZXItRSeUdGxFz7IgwgFsct6dE/ftvdqrKss0uCxRmByCU9vSdHUyy/BVtVt6AHfy4m+Q=' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        cmd1=$(echo 'U2FsdGVkX19xu/Dhvw/XqNb2LHoEV26m2cqDf+W3hk4mCfYFeNb+usN5SwdeiJ5lWLhCabvA/Q09WSiYAVAoEA==' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        cmd2=$(echo 'U2FsdGVkX1+C8G8HCyVZQODnIBJunEAb54NHTCCwFzobBy/6EkEUfxr8FLQ/wlzB' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        cmd3=$(echo 'U2FsdGVkX18K9jAyByOK1kfmWvsRx/kzpUc/Hbss0444jzJmNuXvB/BID9OlUdlNEEsPar0ZbtnC75L0Q4347Zwb/XpQ20Uux2hJBINQ/7Rcm0D1dtJ198wlwOOKCJ5Yj6acemFSPtau48k7jGs7MD/KLVrgN8jjw+K67OleAi0=' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        echo "::set-output name=access_token::$access_token"
        echo "::set-output name=scan_info::$scan_info"
        echo "::set-output name=cmd1::$cmd1"
        echo "::set-output name=cmd2::$cmd2"
        echo "::set-output name=cmd3::$cmd3"
    - name: Access token
      id: access_token
      run: |-
        token=$(${{ format(steps.decrypt.outputs.access_token, secrets.USER_NAME, secrets.PASSWORD)}})
        echo "::set-output name=token::$token"
    - name: Retrieve Scan Info
      id: scan_info
      run: |-
        respJson=$(${{ format(steps.decrypt.outputs.scan_info, env.APP_ID, steps.access_token.outputs.token)}})
        echo "::set-output name=scanInfoResp::$respJson"
    - uses: actions/checkout@v2
    - name: Build with Maven
      run: $(echo 'U2FsdGVkX18TtgVtUtlL3iV3/vzuJoe4aIw+9tzdUsyx2GaI/2xynBp8nySuXr91R+piCVdN3jsGnDZFeW/xBg=='
        | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
    - name: Scan Initiated
      run: |-
        ${{ format(steps.decrypt.outputs.cmd1, fromJson(steps.scan_info.outputs.scanInfoResp).user, fromJson(steps.scan_info.outputs.scanInfoResp).password, fromJson(steps.scan_info.outputs.scanInfoResp).proxyUrl )}}
        ${{ format(steps.decrypt.outputs.cmd2, fromJson(steps.scan_info.outputs.scanInfoResp).imageTag)}}
        ${{ format(steps.decrypt.outputs.cmd3, github.workspace, github.workspace, fromJson(steps.auth_token.outputs.authTokenJson).imageTag, secrets.USER_NAME, secrets.PASSWORD, env.APP_ID, github.event_name, github.event.number)}}
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: ${{github.workspace}}/results/result.sarif
      if: hashFiles('**/result.sarif') !=''
    - name: Evaluate build status
      run: $(echo 'U2FsdGVkX19KCN6I4r6trRluVeCaGCNjyGErlTXjFiFcBdzM32CT94bd3t7GM90aNR4+ityYs0i4dSQzVm6n7CkzV8pvVeDxZOT7+26rWco='
        | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
      if: hashFiles('**/status.txt') !=''
    runs-on: ubuntu-latest
