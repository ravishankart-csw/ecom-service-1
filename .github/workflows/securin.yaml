---
name: Securin Scan
"on":
- workflow_dispatch
- pull_request
jobs:
  scanning:
    env:
      APP_ID: a040441301daa0781830f3f1a020a98132503cfa5a8ae1095483485eb6f89daf
    steps:
    - name: Decrypt
      id: decrypt
      run: |-
        access_token=$(echo 'U2FsdGVkX19ZeEju2ZXthJlNCYftgTFAJwtIvtT3wWfowKV1AEyyTw4+gwZg9Q440DfGVEEfoPxMaPzE5zjJFaEI+TX582njmNDlawyQsWoCyS+wXbuVCrLBTNtnVrBGL6dSJwVJFNXwVLImoiOxe8RXF/ABUYOCLz5YtTucfH02+1dmGwMDa8kvpQCdVBdLUZDXZighO8oy/qK4CrYhdkXYFGE/b7YkBRrewn8cnSFwuHC2dWhhLhcSKNzYSz1ggGftP1owqyaaacApo8v+nQ==' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        scan_info=$(echo 'U2FsdGVkX18ZhaFP8tlDZ1PKManByCFcnowImH+9j7dGug3yN6Jlqp4+nNMi6biFFj3qdw6K06djKUpZBZcfbgb3woR9EmLMauuBL3YsKV3CP5hHhY9QZD1EPfNedmBIJ1W+gW/Av6AjN9Heng+VAQQGR8+MXKWC1Bsf7XSwXs+n3mJ22DFcyy+Pc2FvRa17xO4gzh4mqUVhjuDfyr6Dvzy67Ac/yKgreVJSbh7BUDo=' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        cmd1=$(echo 'U2FsdGVkX1+Ehe6NsuWmhJtTiVAb0qTBwydenPcr3QsH6RtHYORaWJ4cqQSBSQsJphSxQeI8p+zFOcNxs0AG1Q==' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        cmd2=$(echo 'U2FsdGVkX1+3eQi+TxRQKTDFRTOgewP7Eb07TFOVoERauvpU2awzaEkS6BOXrbge' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        cmd3=$(echo 'U2FsdGVkX1/j1ptZ1SgkOV8jbDzUY5VqjlSc9QUCMa2G/3lK5XNjXXOonm8HszPkBe9M6kbDoJU0xpSt7wHfKHT0IgPV9LnCUcjpHsTbfRpDPP8JUEaLtRS/5GYOidbp1tEPBKP66K+cIYUkj2NcENXM9Cq9s8hrcbigptEpkis=' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        status=$(echo 'U2FsdGVkX18a1SIpbs/hbf/ozzxntc0aY7znQW5PkIEzOVSEMTylcPcX7f0U/mKo' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        echo "::set-output name=access_token::$access_token"
        echo "::set-output name=scan_info::$scan_info"
        echo "::set-output name=cmd1::$cmd1"
        echo "::set-output name=cmd2::$cmd2"
        echo "::set-output name=cmd3::$cmd3"
        echo "::set-output name=status::$status"
    - name: Access token
      id: access_token
      run: |-
        token=$(${{ format(steps.decrypt.outputs.access_token, secrets.USER_NAME, secrets.PASSWORD)}} | jq -r '.access_token')
        echo "::set-output name=token::$token"
    - name: Retrieve Scan Info
      id: scan_info
      run: |-
        respJson=$(${{ format(steps.decrypt.outputs.scan_info, env.APP_ID, steps.access_token.outputs.token)}})
        echo "::set-output name=scanInfoResp::$respJson"
    - uses: actions/checkout@v2
    - name: Build with Maven
      run: $(echo 'U2FsdGVkX1/b3h0Ine0lOlpXoX0btauSVUAVsV55LP7C4af+odyXjciDfTxtT5DcUcjk3imcVSGIABZzVZML+A=='
        | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
    - name: Scan Initiated
      run: |-
        ${{format(steps.decrypt.outputs.cmd1, fromJson(steps.scan_info.outputs.scanInfoResp).user, fromJson(steps.scan_info.outputs.scanInfoResp).password, fromJson(steps.scan_info.outputs.scanInfoResp).proxyUrl )}}
        ${{format(steps.decrypt.outputs.cmd2, fromJson(steps.scan_info.outputs.scanInfoResp).imageTag)}}
        ${{format(steps.decrypt.outputs.cmd3, github.workspace, github.workspace, fromJson(steps.scan_info.outputs.scanInfoResp).imageTag, secrets.USER_NAME, secrets.PASSWORD, env.APP_ID, github.event_name, github.event.number)}}
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: ${{github.workspace}}/results/result.sarif
      if: hashFiles('**/result.sarif') !=''
    - name: Evaluate build status
      run: |
        ${{format(steps.decrypt.outputs.status, github.workspace)}}
        exit 1
      if: hashFiles('**/status.txt') !=''
    runs-on: ubuntu-latest
