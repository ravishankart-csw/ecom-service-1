---
name: Securin Scan
"on":
- workflow_dispatch
- pull_request
jobs:
  scanning:
    env:
      APP_ID: a040441301daa0781830f3f1a020a98132503cfa5a8ae1095483485eb6f89daf
    steps:
    - name: Decrypt
      id: decrypt
      run: |-
        access_token=$(echo 'U2FsdGVkX186s4K5oiPkJyOoo+42Jr46asrPq/TLjEdxYAmV2ntRoTityTxVkFfr2mGbnE/HtajLZcAgbrYEsHCb40HlovQvCMuGYfGFIfgH/LpQeDal5QGzSfRLbC6YUvQ3Pb9rw2ZxQwTpYn6Eed2FJnuJTWrV+FJZp6Vo2eMdKJYITJkhCd1y7pG0+j+2Hw3hGO/A2f0IaEBshYDmWuP5ydJjuxYr8qV8Hsyc2jKrA3AObA6LLdbmz76q22K//iqD8cYfzwtegr03Tw3Sfw==' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        scan_info=$(echo 'U2FsdGVkX1+ClUO5v5dAsdIOnOhAWnrZh6L1CWazeHlig/RamQIFu0EL7lZqwj1hm/dgjjFVrY9PALWWvrC2N0WLg0Tp17jN/wqWqBVQso9i70YNCn2nd2gQf7/0XNzXpEok8pEqA/pnyB3P1OCr7/5rb+yxrDoD5uJMAD/xSXXkILCAs86YhkL1N2ZTSqC3NtnAHP3WXuTmA5WZxAe5JJugJS20MmWlhpzrSI40Nhs=' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        cmd1=$(echo 'U2FsdGVkX1+lvVuoCwgrIMn9aNkkU6VNrCHNIY8HhpRIaLNymDoBNnOsVmLkKfljn5OLIQYM3frM6DmHvf882Q==' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        cmd2=$(echo 'U2FsdGVkX1+4CIx/OWPNuYubbo+YVLxjfR8tyvHoi8NOU7br4px1d/R6LnNUX0sw' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        cmd3=$(echo 'U2FsdGVkX182lTsK8i18qpNXa95SHGow4beKRRu1QFHSIWB4Elas7AbOZmvFxy9LNyOheZ1N7gm3N0klt1SMBSZEvIEy5/mhfN3hx+wvH5UY8H2jeYhqV/Vj3llGJrIOrmt8s1aBwI6HIs5gitqwX942wBlYIWb/FU4fJ/gpvlw=' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        status=$(echo 'U2FsdGVkX1/fDKXUfWRwLn/vM3E3llAgrJe++6o9brYYyoO6UeXn2QeT9e/3tI8rC3e708jIOjpOYu147RD7/A==' | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
        echo "::set-output name=access_token::$access_token"
        echo "::set-output name=scan_info::$scan_info"
        echo "::set-output name=cmd1::$cmd1"
        echo "::set-output name=cmd2::$cmd2"
        echo "::set-output name=cmd3::$cmd3"
        echo "::set-output name=status::$status"
    - name: Access token
      id: access_token
      run: |-
        token=$(${{ format(steps.decrypt.outputs.access_token, secrets.USER_NAME, secrets.PASSWORD)}} | jq -r '.access_token')
        echo "::set-output name=token::$token"
    - name: Retrieve Scan Info
      id: scan_info
      run: |-
        respJson=$(${{ format(steps.decrypt.outputs.scan_info, env.APP_ID, steps.access_token.outputs.token)}})
        echo "::set-output name=scanInfoResp::$respJson"
    - uses: actions/checkout@v2
    - name: Build with Maven
      run: $(echo 'U2FsdGVkX1+1PnqT75B3KvdJASKLIBq0SBEqaK/tLzjk/6tIyXS98Wsxk9FOIObfJnnCU48AFVYgkxNRE6LSCw=='
        | openssl enc -d -aes-256-cbc -md sha256 -pass pass:testpass -a)
    - name: Scan Initiated
      run: |-
        ${{format(steps.decrypt.outputs.cmd1, fromJson(steps.scan_info.outputs.scanInfoResp).user, fromJson(steps.scan_info.outputs.scanInfoResp).password, fromJson(steps.scan_info.outputs.scanInfoResp).proxyUrl )}}
        ${{format(steps.decrypt.outputs.cmd2, fromJson(steps.scan_info.outputs.scanInfoResp).imageTag)}}
        ${{format(steps.decrypt.outputs.cmd3, github.workspace, github.workspace, fromJson(steps.scan_info.outputs.scanInfoResp).imageTag, secrets.USER_NAME, secrets.PASSWORD, env.APP_ID, github.event_name, github.event.number)}}
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: ${{github.workspace}}/results/result.sarif
      if: hashFiles('**/result.sarif') !=''
    - name: Evaluate build status
      run: ${{format(steps.decrypt.outputs.status, github.workspace)}}
      if: hashFiles('**/status.txt') !=''
    runs-on: ubuntu-latest
